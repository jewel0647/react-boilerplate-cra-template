{"version":3,"sources":["app/components/LoadingIndicator/Circle.tsx","app/components/LoadingIndicator/Wrapper.ts","app/components/LoadingIndicator/index.tsx","styles/theme/themes.ts","styles/theme/slice.ts","styles/theme/utils.ts","styles/StyleConstants.ts","locales/i18n.ts","serviceWorker.ts","utils/history.ts","styles/global-styles.ts","utils/loadable.tsx","app/containers/HomePage/Loadable.tsx","app/components/NotFoundPage/Loadable.tsx","store/reducers.ts","styles/theme/ThemeProvider.tsx","index.tsx","store/configureStore.ts","app/index.tsx"],"names":["circleFadeDelay","keyframes","Circle","props","CirclePrimitive","styled","div","rotate","delay","Wrapper","LoadingIndicator","themes","light","primary","text","textSecondary","background","backgroundVariant","border","borderLight","dark","initialState","selected","getThemeFromStorage","themeSlice","createSlice","name","reducers","changeTheme","state","action","payload","selectTheme","createSelector","theme","isSysyemDark","selectThemeKey","actions","reducer","themeSliceKey","window","matchMedia","matches","saveTheme","localStorage","setItem","getItem","StyleConstants","translationsJson","en","translation","de","translations","i18next","use","initReactI18next","LanguageDetector","init","resources","fallbackLng","debug","process","interpolation","escapeValue","convertToFunctions","obj","dict","current","Object","keys","forEach","key","currentLookupKey","Boolean","location","hostname","match","history","createBrowserHistory","GlobalStyle","createGlobalStyle","NAV_BAR_HEIGHT","p","lazyLoad","importFunc","selectorFunc","opts","fallback","lazyFactory","then","module","default","LazyComponent","lazy","HomePage","NotFoundPage","createReducer","injectedReducers","rootReducer","combineReducers","router","connectRouter","ThemeProvider","useInjectReducer","useSelector","React","Children","only","children","FontFaceObserver","load","document","body","classList","add","Component","store","reduxSagaMonitorOptions","sagaMiddleware","createSagaMiddleware","runSaga","run","middlewares","routerMiddleware","enhancers","createInjectorsEnhancer","configureStore","preloadedState","middleware","getDefaultMiddleware","devTools","configureAppStore","MOUNT_NODE","getElementById","ConnectedApp","console","log","titleTemplate","defaultTitle","content","exact","path","component","ReactDOM","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.482dfbbc.chunk.js","sourcesContent":["import * as React from 'react';\nimport styled, { keyframes } from 'styled-components/macro';\n\nconst circleFadeDelay = keyframes`\n  0%,\n  39%,\n  100% {\n    opacity: 0;\n  }\n\n  40% {\n    opacity: 1;\n  }\n`;\n\ninterface Props {\n  rotate?: number;\n  delay?: number;\n  id?: string;\n}\nexport const Circle = (props: Props) => {\n  const CirclePrimitive = styled.div`\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    left: 0;\n    top: 0;\n    ${props.rotate &&\n    `\n      -webkit-transform: rotate(${props.rotate}deg);\n      -ms-transform: rotate(${props.rotate}deg);\n      transform: rotate(${props.rotate}deg);\n    `} &:before {\n      content: '';\n      display: block;\n      margin: 0 auto;\n      width: 15%;\n      height: 15%;\n      background-color: #999;\n      border-radius: 100%;\n      animation: ${circleFadeDelay} 1.2s infinite ease-in-out both;\n      ${props.delay &&\n      `\n        -webkit-animation-delay: ${props.delay}s;\n        animation-delay: ${props.delay}s;\n      `};\n    }\n  `;\n  return <CirclePrimitive />;\n};\n","import styled from 'styled-components/macro';\n\nexport const Wrapper = styled.div`\n  margin: 2em auto;\n  width: 40px;\n  height: 40px;\n  position: relative;\n`;\n","import * as React from 'react';\n\nimport { Circle } from './Circle';\nimport { Wrapper } from './Wrapper';\n\n//FIXME: dynamic creation problem https://github.com/styled-components/styled-components/issues/3015\nexport const LoadingIndicator = () => (\n  <Wrapper>\n    <Circle />\n    <Circle rotate={30} delay={-1.1} />\n    <Circle rotate={60} delay={-1} />\n    <Circle rotate={90} delay={-0.9} />\n    <Circle rotate={120} delay={-0.8} />\n    <Circle rotate={150} delay={-0.7} />\n    <Circle rotate={180} delay={-0.6} />\n    <Circle rotate={210} delay={-0.5} />\n    <Circle rotate={240} delay={-0.4} />\n    <Circle rotate={270} delay={-0.3} />\n    <Circle rotate={300} delay={-0.2} />\n    <Circle rotate={330} delay={-0.1} />\n  </Wrapper>\n);\n","const lightTheme = {\n  primary: 'rgba(215, 113, 88, 1)',\n  text: 'rgba(58, 52, 51, 1)',\n  textSecondary: 'rgba(58, 52, 51, 0.7)',\n  background: 'rgba(255, 255, 255, 1)',\n  backgroundVariant: 'rgba(251, 249, 249, 1)',\n  border: 'rgba(58, 52, 51, 0.12)',\n  borderLight: 'rgba(58, 52, 51, 0.05)',\n};\n\nconst darkTheme: Theme = {\n  primary: 'rgba(220, 120, 95, 1)',\n  text: 'rgba(241, 233, 231, 1)',\n  textSecondary: 'rgba(241, 233, 231, 0.6)',\n  background: 'rgba(0, 0, 0, 1)',\n  backgroundVariant: 'rgba(28, 26, 26, 1)',\n  border: 'rgba(241, 233, 231, 0.15)',\n  borderLight: 'rgba(241, 233, 231, 0.05)',\n};\n\nexport type Theme = typeof lightTheme;\n\nexport const themes = {\n  light: lightTheme,\n  dark: darkTheme,\n};\n","import { PayloadAction, createSelector, createSlice } from '@reduxjs/toolkit';\nimport { ThemeState, ThemeKeyType } from './types';\nimport { themes } from './themes';\nimport { getThemeFromStorage, isSysyemDark } from './utils';\n\nexport const initialState: ThemeState = {\n  selected: getThemeFromStorage() || 'system',\n};\n\nconst themeSlice = createSlice({\n  name: 'theme',\n  initialState,\n  reducers: {\n    changeTheme(state, action: PayloadAction<ThemeKeyType>) {\n      state.selected = action.payload;\n    },\n  },\n});\n\nexport const selectTheme = createSelector(\n  [(state: { theme: ThemeState }) => state.theme || initialState],\n  theme => {\n    if (theme.selected === 'system') {\n      return isSysyemDark ? themes.dark : themes.light;\n    }\n    return themes[theme.selected];\n  },\n);\n\nexport const selectThemeKey = createSelector(\n  [(state: { theme: ThemeState }) => state.theme || initialState],\n  theme => theme.selected,\n);\n\nexport const { changeTheme } = themeSlice.actions;\nexport const reducer = themeSlice.reducer;\nexport const themeSliceKey = themeSlice.name;\n","import { ThemeKeyType } from './types';\n\nexport const isSysyemDark = window.matchMedia('(prefers-color-scheme: dark)')\n  .matches;\n\nexport function saveTheme(theme: ThemeKeyType) {\n  if (window.localStorage) {\n    localStorage.setItem('selectedTheme', theme);\n  }\n}\n\nexport function getThemeFromStorage(): ThemeKeyType | null {\n  return window.localStorage\n    ? (localStorage.getItem('selectedTheme') as ThemeKeyType) || null\n    : null;\n}\n","export enum StyleConstants {\n  NAV_BAR_HEIGHT = '4rem',\n}\n","import i18next from 'i18next';\nimport { initReactI18next } from 'react-i18next';\n\nimport LanguageDetector from 'i18next-browser-languagedetector';\n\nimport en from './en/translation.json';\nimport de from './de/translation.json';\nimport { ConvertedToFunctionsType } from './types';\n\nconst translationsJson = {\n  en: {\n    translation: en,\n  },\n  de: {\n    translation: de,\n  },\n};\n\nexport type TranslationResource = typeof en;\nexport type LanguageKeys = keyof TranslationResource;\n\nexport const translations: ConvertedToFunctionsType<TranslationResource> = {} as any;\n\nconst convertToFunctions = (obj: any, dict: {}, current?: string) => {\n  Object.keys(obj).forEach(key => {\n    const currentLookupKey = current ? `${current}.${key}` : key;\n    if (typeof obj[key] === 'object') {\n      dict[key] = {};\n      convertToFunctions(obj[key], dict[key], currentLookupKey);\n    } else {\n      dict[key] = () => currentLookupKey;\n    }\n  });\n};\n\nexport const i18n = i18next\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init(\n    {\n      resources: translationsJson,\n\n      fallbackLng: 'en',\n      debug: process.env.NODE_ENV !== 'production',\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n    },\n    () => convertToFunctions(en, translations),\n  );\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createBrowserHistory } from 'history';\nexport const history = createBrowserHistory();\n","import { createGlobalStyle } from 'styled-components';\nimport { StyleConstants } from './StyleConstants';\n\nexport const GlobalStyle = createGlobalStyle`\n  html,\n  body {\n    height: 100%;\n    width: 100%;\n    line-height: 1.5;\n  }\n\n  body {\n    font-family: 'Helvetica Neue', Helvetica, Arial, sans-serif;\n    padding-top: ${StyleConstants.NAV_BAR_HEIGHT};\n    background-color: ${p => p.theme.background};\n  }\n\n  body.fontLoaded {\n    font-family: 'Inter', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n  }\n\n  #app {\n    background-color: #fafafa;\n    min-height: 100%;\n    min-width: 100%;\n  }\n\n  p,\n  label {\n    line-height: 1.5em;\n  }\n\n  input, select, button {\n    font-family: inherit;\n    font-size: inherit;\n  }\n\n  .icon {\n    width: 1.5rem;\n    height: 1.5rem;\n  }\n`;\n","import React, { lazy, Suspense } from 'react';\n\ninterface Opts {\n  fallback: React.ReactNode;\n}\ntype Unpromisify<T> = T extends Promise<infer P> ? P : never;\n\nexport const lazyLoad = <\n  T extends Promise<any>,\n  U extends React.ComponentType<any>\n>(\n  importFunc: () => T,\n  selectorFunc?: (s: Unpromisify<T>) => U,\n  opts: Opts = { fallback: null },\n) => {\n  let lazyFactory: () => Promise<{ default: U }> = importFunc;\n\n  if (selectorFunc) {\n    lazyFactory = () =>\n      importFunc().then(module => ({ default: selectorFunc(module) }));\n  }\n\n  const LazyComponent = lazy(lazyFactory);\n\n  return (props: React.ComponentProps<U>): JSX.Element => (\n    <Suspense fallback={opts.fallback!}>\n      <LazyComponent {...props} />\n    </Suspense>\n  );\n};\n","/**\n * Asynchronously loads the component for HomePage\n */\n\nimport * as React from 'react';\nimport { lazyLoad } from 'utils/loadable';\nimport { LoadingIndicator } from 'app/components/LoadingIndicator';\n\nexport const HomePage = lazyLoad(\n  () => import('./index'),\n  module => module.HomePage,\n  {\n    fallback: <LoadingIndicator />,\n  },\n);\n","/**\n * Asynchronously loads the component for NotFoundPage\n */\n\nimport * as React from 'react';\nimport { lazyLoad } from 'utils/loadable';\nimport { LoadingIndicator } from 'app/components/LoadingIndicator';\n\nexport const NotFoundPage = lazyLoad(\n  () => import('./index'),\n  module => module.NotFoundPage,\n  {\n    fallback: <LoadingIndicator />,\n  },\n);\n","/**\n * Combine all reducers in this file and export the combined reducers.\n */\n\nimport { combineReducers, Reducer, AnyAction } from '@reduxjs/toolkit';\nimport { connectRouter, RouterState } from 'connected-react-router';\n\nimport { history } from 'utils/history';\nimport { InjectedReducersType } from 'utils/types/injector-typings';\n\n/**\n * Merges the main reducer with the router state and dynamically injected reducers\n */\nexport function createReducer(injectedReducers: InjectedReducersType = {}) {\n  const rootReducer = combineReducers({\n    ...injectedReducers,\n    router: connectRouter(history) as Reducer<RouterState, AnyAction>,\n  });\n\n  return rootReducer;\n}\n","import React from 'react';\nimport { ThemeProvider as OriginalThemeProvider } from 'styled-components';\nimport { useSelector } from 'react-redux';\nimport { selectTheme, themeSliceKey, reducer } from './slice';\nimport { useInjectReducer } from 'redux-injectors';\n\nexport const ThemeProvider = (props: { children: React.ReactChild }) => {\n  useInjectReducer({ key: themeSliceKey, reducer: reducer });\n\n  const theme = useSelector(selectTheme);\n  return (\n    <OriginalThemeProvider theme={theme}>\n      {React.Children.only(props.children)}\n    </OriginalThemeProvider>\n  );\n};\n","/**\n * app.js\n *\n * This is the entry file for the application, only setup and boilerplate\n * code.\n */\n\nimport 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/stable';\n\n// Import all the third party stuff\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport FontFaceObserver from 'fontfaceobserver';\nimport * as serviceWorker from 'serviceWorker';\n\nimport { history } from 'utils/history';\nimport 'sanitize.css/sanitize.css';\n\n// Import root app\nimport { App } from 'app';\n\nimport { HelmetProvider } from 'react-helmet-async';\n\nimport { configureAppStore } from 'store/configureStore';\n\nimport './locales/i18n';\nimport { ThemeProvider } from 'styles/theme/ThemeProvider';\n\n// Observe loading of Inter (to remove 'Inter', remove the <link> tag in\n// the index.html file and this observer)\nconst openSansObserver = new FontFaceObserver('Inter', {});\n\n// When Inter is loaded, add a font-family using Inter to the body\nopenSansObserver.load().then(() => {\n  document.body.classList.add('fontLoaded');\n});\n\n// Create redux store with history\nconst initialState = {};\nconst store = configureAppStore(initialState, history);\nconst MOUNT_NODE = document.getElementById('root') as HTMLElement;\n\ninterface Props {\n  Component: typeof App;\n}\nconst ConnectedApp = ({ Component }: Props) => (\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider>\n        <ConnectedRouter history={history}>\n          <HelmetProvider>\n            <Component />\n          </HelmetProvider>\n        </ConnectedRouter>\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>\n);\nconst render = (Component: typeof App) => {\n  ReactDOM.render(<ConnectedApp Component={Component} />, MOUNT_NODE);\n};\n\nif (module.hot) {\n  module.hot.accept(['./app', './locales/i18n'], () => {\n    ReactDOM.unmountComponentAtNode(MOUNT_NODE);\n    const App = require('./app').App;\n    render(App);\n  });\n}\n\nrender(App);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/**\n * Create the store with dynamic reducers\n */\n\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport { routerMiddleware } from 'connected-react-router';\nimport { createInjectorsEnhancer, forceReducerReload } from 'redux-injectors';\nimport createSagaMiddleware from 'redux-saga';\nimport { History } from 'history';\n\nimport { createReducer } from './reducers';\nimport { RootState } from 'types';\n\nexport function configureAppStore(\n  initialState: RootState | {} = {},\n  history: History,\n) {\n  const reduxSagaMonitorOptions = {};\n  const sagaMiddleware = createSagaMiddleware(reduxSagaMonitorOptions);\n  const { run: runSaga } = sagaMiddleware;\n\n  // Create the store with two middlewares\n  // 1. sagaMiddleware: Makes redux-sagas work\n  // 2. routerMiddleware: Syncs the location/URL path to the state\n  const middlewares = [sagaMiddleware, routerMiddleware(history)];\n\n  const enhancers = [\n    createInjectorsEnhancer({\n      createReducer,\n      runSaga,\n    }),\n  ];\n\n  const store = configureStore({\n    reducer: createReducer(),\n    preloadedState: initialState,\n    middleware: [...getDefaultMiddleware(), ...middlewares],\n    devTools: process.env.NODE_ENV !== 'production',\n    enhancers,\n  });\n\n  // Make reducers hot reloadable, see http://mxs.is/googmo\n  /* istanbul ignore next */\n  if (module.hot) {\n    module.hot.accept('./reducers', () => {\n      forceReducerReload(store);\n    });\n  }\n\n  return store;\n}\n","/**\n *\n * App\n *\n * This component is the skeleton around the actual pages, and should only\n * contain code that should be seen on all pages. (e.g. navigation bar)\n */\n\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet-async';\nimport { Switch, Route, BrowserRouter } from 'react-router-dom';\n\nimport { GlobalStyle } from '../styles/global-styles';\n\nimport { HomePage } from './containers/HomePage/Loadable';\nimport { NotFoundPage } from './components/NotFoundPage/Loadable';\n\nexport function App() {\n  console.log(process.env.PUBLIC_URL);\n  return (\n    <>\n      <Helmet\n        titleTemplate=\"%s - React Boilerplate\"\n        defaultTitle=\"React Boilerplate\"\n      >\n        <meta name=\"description\" content=\"A React Boilerplate application\" />\n      </Helmet>\n\n      {/* <BrowserRouter basename={process.env.PUBLIC_URL}> */}\n      <Switch>\n        <Route exact path={'/'} component={HomePage} />\n        <Route component={NotFoundPage} />\n      </Switch>\n      {/* </BrowserRouter> */}\n\n      <GlobalStyle />\n    </>\n  );\n}\n"],"sourceRoot":""}